{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-mini-project-1"
		},
		"LS_BLOB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_BLOB'"
		},
		"LS_MONGO_TO_SQL_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_MONGO_TO_SQL'"
		},
		"LS_SQL_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_SQL'"
		},
		"LS_MONGO_TO_SQL_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "management"
		},
		"LS_SQL_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "jman-test-server.database.windows.net"
		},
		"LS_SQL_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "DB_test"
		},
		"LS_SQL_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "vikas"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/LS_BLOB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_BLOB_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_MONGO_TO_SQL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "MongoDbAtlas",
				"typeProperties": {
					"connectionString": "[parameters('LS_MONGO_TO_SQL_connectionString')]",
					"database": "[parameters('LS_MONGO_TO_SQL_properties_typeProperties_database')]",
					"driverVersion": "v2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SQL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_SQL_properties_typeProperties_server')]",
					"database": "[parameters('LS_SQL_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_SQL_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_SQL_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_MONGO_PARAMETERS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_MONGO_TO_SQL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"collectionName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "MongoDbAtlasCollection",
				"schema": [],
				"typeProperties": {
					"collection": {
						"value": "@dataset().collectionName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_MONGO_TO_SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_PRODUCTS_LIST')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BLOB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "misumi_data",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "misumi_data.xlsx",
						"container": "mini-project"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Department Code",
						"type": "String"
					},
					{
						"name": "Category Code",
						"type": "String"
					},
					{
						"name": "Category Name",
						"type": "String"
					},
					{
						"name": "Search Category Code",
						"type": "String"
					},
					{
						"name": "Series Code",
						"type": "String"
					},
					{
						"name": "Series Name",
						"type": "String"
					},
					{
						"name": "Brand Code",
						"type": "String"
					},
					{
						"name": "Brand URL Code",
						"type": "String"
					},
					{
						"name": "Brand Name",
						"type": "String"
					},
					{
						"name": "Series Status",
						"type": "String"
					},
					{
						"name": "Min Days to Ship",
						"type": "String"
					},
					{
						"name": "Max Days to Ship",
						"type": "String"
					},
					{
						"name": "Min Price",
						"type": "String"
					},
					{
						"name": "Max Price",
						"type": "String"
					},
					{
						"name": "Min Price Per Piece",
						"type": "String"
					},
					{
						"name": "Max Price Per Piece",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BLOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_PARAMETERS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaName": {
						"type": "string"
					},
					"tableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_MONGO_TO_SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Users data",
						"description": "Copy Users data from mongodb to sql",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DROP TABLE IF EXISTS RAW.USERS",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$oid']"
										},
										"sink": {
											"name": "id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['fullName']"
										},
										"sink": {
											"name": "fullName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['email']"
										},
										"sink": {
											"name": "email",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['password']"
										},
										"sink": {
											"name": "password",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['role']"
										},
										"sink": {
											"name": "role",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_MONGO_PARAMETERS",
								"type": "DatasetReference",
								"parameters": {
									"collectionName": "users"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_PARAMETERS",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "raw",
									"tableName": "users"
								}
							}
						]
					},
					{
						"name": "Copy Projects data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DROP TABLE IF EXISTS RAW.PROJECTS",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$oid']"
										},
										"sink": {
											"name": "id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['name']"
										},
										"sink": {
											"name": "projectName"
										}
									},
									{
										"source": {
											"path": "$['description']"
										},
										"sink": {
											"name": "projectDescription"
										}
									},
									{
										"source": {
											"path": "$['assignedTo']['$oid']"
										},
										"sink": {
											"name": "projectUserId"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_MONGO_PARAMETERS",
								"type": "DatasetReference",
								"parameters": {
									"collectionName": "projects"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_PARAMETERS",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "raw",
									"tableName": "projects"
								}
							}
						]
					},
					{
						"name": "Copy Tasks data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DROP TABLE IF EXISTS RAW.TASKS",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['_id']['$oid']"
										},
										"sink": {
											"name": "id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['name']"
										},
										"sink": {
											"name": "taskName"
										}
									},
									{
										"source": {
											"path": "$['description']"
										},
										"sink": {
											"name": "taskDescription"
										}
									},
									{
										"source": {
											"path": "$['status']"
										},
										"sink": {
											"name": "taskStatus"
										}
									},
									{
										"source": {
											"path": "$['assignedTo']['$oid']"
										},
										"sink": {
											"name": "taskUserId"
										}
									},
									{
										"source": {
											"path": "$['project']['$oid']"
										},
										"sink": {
											"name": "projectId",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_MONGO_PARAMETERS",
								"type": "DatasetReference",
								"parameters": {
									"collectionName": "tasks"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_PARAMETERS",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "raw",
									"tableName": "tasks"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_MONGO_PARAMETERS')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_PARAMETERS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_CLEANED_TO_REPORT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_PARAMETERS",
								"type": "DatasetReference"
							},
							"name": "projectsSqlCleaned"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_PARAMETERS",
								"type": "DatasetReference"
							},
							"name": "tasksSqlCleaned"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_PARAMETERS",
								"type": "DatasetReference"
							},
							"name": "userSqlCleaned"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_PARAMETERS",
								"type": "DatasetReference"
							},
							"name": "reportTable"
						}
					],
					"transformations": [
						{
							"name": "projectsAndTasks"
						},
						{
							"name": "totalTasksPerProject"
						},
						{
							"name": "tasksCompletion",
							"description": "Creating completionPercentage'"
						},
						{
							"name": "join1"
						},
						{
							"name": "reportTableSelect"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          projectName as string,",
						"          projectDescription as string,",
						"          projectUserId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> projectsSqlCleaned",
						"source(output(",
						"          id as string,",
						"          taskName as string,",
						"          taskDescription as string,",
						"          taskStatus as string,",
						"          taskUserId as string,",
						"          projectId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tasksSqlCleaned",
						"source(output(",
						"          id as string,",
						"          fullName as string,",
						"          email as string,",
						"          password as string,",
						"          role as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> userSqlCleaned",
						"projectsSqlCleaned, tasksSqlCleaned join(projectsSqlCleaned@id == projectId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> projectsAndTasks",
						"projectsAndTasks aggregate(groupBy(projectName,",
						"          projectUserId),",
						"     totalTasks = count(tasksSqlCleaned@id),",
						"          doneTasks = countIf(taskStatus=='Done')) ~> totalTasksPerProject",
						"totalTasksPerProject derive(completionPercentage = round((doneTasks*100)/totalTasks,2)) ~> tasksCompletion",
						"tasksCompletion, userSqlCleaned join(projectUserId == id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          projectName,",
						"          projectAssignedTo = fullName,",
						"          totalTasks,",
						"          doneTasks,",
						"          completionPercentage",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> reportTableSelect",
						"reportTableSelect sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['DROP TABLE IF EXISTS REPORT.COMPLETIONDATA'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> reportTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_PARAMETERS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PRODUCTS_RAW_TO_CLEANED')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_PARAMETERS",
								"type": "DatasetReference"
							},
							"name": "productsRaw"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_PARAMETERS",
								"type": "DatasetReference"
							},
							"name": "productsCleaned"
						}
					],
					"transformations": [
						{
							"name": "productsDuplicate"
						},
						{
							"name": "duplicatedFilter"
						},
						{
							"name": "duplicatedRemoved"
						}
					],
					"scriptLines": [
						"source(output(",
						"          departmentCode as string,",
						"          categoryCode as string,",
						"          categoryName as string,",
						"          searchCategoryCode as string,",
						"          seriesCode as string,",
						"          seriesName as string,",
						"          brandCode as string,",
						"          brandUrlCode as string,",
						"          brandName as string,",
						"          seriesStatus as string,",
						"          minDaysToShip as string,",
						"          maxDaysToShip as string,",
						"          minPrice as string,",
						"          maxPrice as string,",
						"          minPricePerPiece as string,",
						"          maxPricePerPiece as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> productsRaw",
						"productsRaw window(over(seriesCode),",
						"     asc(seriesCode, true),",
						"     RNK = rowNumber()) ~> productsDuplicate",
						"productsDuplicate filter(RNK==1) ~> duplicatedFilter",
						"duplicatedFilter select(mapColumn(",
						"          departmentCode,",
						"          categoryCode,",
						"          categoryName,",
						"          searchCategoryCode,",
						"          seriesCode,",
						"          seriesName,",
						"          brandCode,",
						"          brandUrlCode,",
						"          brandName,",
						"          seriesStatus,",
						"          minDaysToShip,",
						"          maxDaysToShip,",
						"          minPrice,",
						"          maxPrice,",
						"          minPricePerPiece,",
						"          maxPricePerPiece",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> duplicatedRemoved",
						"duplicatedRemoved sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> productsCleaned"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_PARAMETERS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_RAW_TO_CLEANED')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_PARAMETERS",
								"type": "DatasetReference"
							},
							"name": "userRawData"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_PARAMETERS",
								"type": "DatasetReference"
							},
							"name": "projectsRawData",
							"description": "Projects source sql"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_PARAMETERS",
								"type": "DatasetReference"
							},
							"name": "tasksRawData",
							"description": "Tasks source sql"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_PARAMETERS",
								"type": "DatasetReference"
							},
							"name": "userCleanedFinalOutput",
							"description": "Cleaned the dataset"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_PARAMETERS",
								"type": "DatasetReference"
							},
							"name": "projectsCleanedFinalOutput"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_PARAMETERS",
								"type": "DatasetReference"
							},
							"name": "tasksCleanedData"
						}
					],
					"transformations": [
						{
							"name": "userNullValuesRemove",
							"description": "filtering rows if id or role is null"
						},
						{
							"name": "userEmailChecking",
							"description": "checking the user email is valid"
						},
						{
							"name": "projectsDuplicateGrouped"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          fullName as string,",
						"          email as string,",
						"          password as string,",
						"          role as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> userRawData",
						"source(output(",
						"          id as string,",
						"          projectName as string,",
						"          projectDescription as string,",
						"          projectUserId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> projectsRawData",
						"source(output(",
						"          id as string,",
						"          taskName as string,",
						"          taskDescription as string,",
						"          taskStatus as string,",
						"          taskUserId as string,",
						"          projectId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tasksRawData",
						"userRawData filter(id!=\"NULL\" || role!=\"NULL\") ~> userNullValuesRemove",
						"userNullValuesRemove derive(email = iif(endsWith(email, '@gmail.com'), email, concat(email, '@gmail.com'))) ~> userEmailChecking",
						"projectsRawData aggregate(groupBy(id,",
						"          projectName,",
						"          projectDescription),",
						"     projectUserId = first(projectUserId)) ~> projectsDuplicateGrouped",
						"userEmailChecking sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['DROP TABLE IF EXISTS CLEANED.USERS'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> userCleanedFinalOutput",
						"projectsDuplicateGrouped sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['DROP TABLE IF EXISTS CLEANED.PROJECTS'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> projectsCleanedFinalOutput",
						"tasksRawData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['DROP TABLE IF EXISTS CLEANED.TASKS'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> tasksCleanedData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_PARAMETERS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_PRODUCTS_CLEANED_TO_REPORT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_PARAMETERS",
								"type": "DatasetReference"
							},
							"name": "productsCleaned"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_PARAMETERS",
								"type": "DatasetReference"
							},
							"name": "factTable1Category"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_PARAMETERS",
								"type": "DatasetReference"
							},
							"name": "factTable2BrandName"
						}
					],
					"transformations": [
						{
							"name": "groupByCategory"
						},
						{
							"name": "filterNullPrices"
						},
						{
							"name": "sortAvgPrices"
						},
						{
							"name": "groupByBrandName"
						},
						{
							"name": "sortAvgPricesByBrandName"
						}
					],
					"scriptLines": [
						"source(output(",
						"          departmentCode as string,",
						"          categoryCode as string,",
						"          categoryName as string,",
						"          searchCategoryCode as string,",
						"          seriesCode as string,",
						"          seriesName as string,",
						"          brandCode as string,",
						"          brandUrlCode as string,",
						"          brandName as string,",
						"          seriesStatus as string,",
						"          minDaysToShip as double,",
						"          maxDaysToShip as double,",
						"          minPrice as double,",
						"          maxPrice as double,",
						"          minPricePerPiece as double,",
						"          maxPricePerPiece as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> productsCleaned",
						"productsCleaned aggregate(groupBy(categoryName),",
						"     avgMinPrice = round(avg(minPrice),2),",
						"          avgMaxPrice = round(avg(maxPrice),2)) ~> groupByCategory",
						"groupByCategory filter(!isNull(avgMinPrice) && !isNull(avgMaxPrice) ) ~> filterNullPrices",
						"filterNullPrices sort(asc(avgMinPrice, true),",
						"     asc(avgMaxPrice, true)) ~> sortAvgPrices",
						"productsCleaned aggregate(groupBy(brandName),",
						"     avgMinPrice = round(avg(minPrice),2),",
						"          avgMaxPrice = round(avg(maxPrice),2)) ~> groupByBrandName",
						"groupByBrandName sort(asc(avgMinPrice, true),",
						"     asc(avgMaxPrice, true)) ~> sortAvgPricesByBrandName",
						"sortAvgPrices sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> factTable1Category",
						"sortAvgPricesByBrandName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> factTable2BrandName"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_PARAMETERS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_BLOB_TO_SQL_RAW_TO_CLEANED')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy products list to sql",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DROP TABLE IF EXISTS RAW.PRODUCTS",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Department Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "departmentCode",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Category Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "categoryCode",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Category Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "categoryName",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Search Category Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "searchCategoryCode",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Series Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "seriesCode",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Series Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "seriesName",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Brand Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "brandCode",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Brand URL Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "brandUrlCode",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Brand Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "brandName",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Series Status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "seriesStatus",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Min Days to Ship",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "minDaysToShip",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Max Days to Ship",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "maxDaysToShip",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Min Price",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "minPrice",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Max Price",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "maxPrice",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Min Price Per Piece",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "minPricePerPiece",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Max Price Per Piece",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "maxPricePerPiece",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_PRODUCTS_LIST",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_PARAMETERS",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "raw",
									"tableName": "products"
								}
							}
						]
					},
					{
						"name": "Raw to Cleaned",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy products list to sql",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_PRODUCTS_RAW_TO_CLEANED",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"productsRaw": {
										"schemaName": "raw",
										"tableName": "products"
									},
									"productsCleaned": {
										"schemaName": "cleaned",
										"tableName": "products"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_PRODUCTS_LIST')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_PARAMETERS')]",
				"[concat(variables('factoryId'), '/dataflows/DF_PRODUCTS_RAW_TO_CLEANED')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SQL_RAW_TO_REPORT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Raw to Cleaned",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_RAW_TO_CLEANED",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"userRawData": {
										"schemaName": "raw",
										"tableName": "users"
									},
									"projectsRawData": {
										"schemaName": "raw",
										"tableName": "projects"
									},
									"tasksRawData": {
										"schemaName": "raw",
										"tableName": "tasks"
									},
									"userCleanedFinalOutput": {
										"schemaName": "cleaned",
										"tableName": "users"
									},
									"projectsCleanedFinalOutput": {
										"schemaName": "cleaned",
										"tableName": "projects"
									},
									"tasksCleanedData": {
										"schemaName": "cleaned",
										"tableName": "tasks"
									}
								},
								"linkedServiceParameters": {
									"userRawData": {
										"schemaLinkedService": {
											"schemaName": "raw",
											"tableName": "users"
										}
									},
									"projectsRawData": {
										"schemaLinkedService": {
											"schemaName": "raw",
											"tableName": "projects"
										}
									},
									"tasksRawData": {
										"schemaLinkedService": {
											"schemaName": "raw",
											"tableName": "tasks"
										}
									},
									"userCleanedFinalOutput": {
										"schemaLinkedService": {
											"schemaName": "cleaned",
											"tableName": "users"
										}
									},
									"projectsCleanedFinalOutput": {
										"schemaLinkedService": {
											"schemaName": "cleaned",
											"tableName": "projects"
										}
									},
									"tasksCleanedData": {
										"schemaLinkedService": {
											"schemaName": "cleaned",
											"tableName": "tasks"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Cleaned to Report",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Raw to Cleaned",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_CLEANED_TO_REPORT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"projectsSqlCleaned": {
										"schemaName": "cleaned",
										"tableName": "projects"
									},
									"tasksSqlCleaned": {
										"schemaName": "cleaned",
										"tableName": "tasks"
									},
									"userSqlCleaned": {
										"schemaName": "cleaned",
										"tableName": "users"
									},
									"reportTable": {
										"schemaName": "report",
										"tableName": "completiondata"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_RAW_TO_CLEANED')]",
				"[concat(variables('factoryId'), '/dataflows/DF_CLEANED_TO_REPORT')]"
			]
		}
	]
}